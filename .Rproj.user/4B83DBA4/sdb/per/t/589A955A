{
    "contents" : "# server.R\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(leaflet)\nlibrary(tigris)\nlibrary(maptools)\nlibrary(data.table)\n\n\n#indyData <- read.csv(\"data/indiana_district_data_score.csv\")\nindy_data <- fread(\"~/Indiana/shinymap/data/indiana_all_attributes.csv\")\nsenateMap <- readShapeSpatial(\"data/tl_2014_18_sldu/tl_2014_18_sldu.shp\")\nhouseMap <- readShapeSpatial(\"data/tl_2014_18_sldl/tl_2014_18_sldl.shp\")\n\nshinyServer(function(input, output, session) {\n\n  indySubset <- reactive({\n    #filter(indyData, chamber == input$chamberSelect, attribute.group == input$demoSelect)\n    indy_data[category == input$categorySelect & chamber == input$chamberSelect] \n  })\n  \n  observe({\n    # subcategory1 subcategory2 attribute.group attribute.value\n    updateSelectInput(session, \"sub1Select\",\n                      label = \"Select Subcateogry1 Value:\", \n                      choices = c(sort(unique(indySubset()$subcategory1))),\n                      selected = unique(indySubset()$subcategory1)[1])\n   \n    updateSelectInput(session, \"sub2Select\",\n                      label = \"Select Subcategory2 Value:\", \n                      choices = c(sort(unique(indySubset()$subcategory2))),\n                      selected = unique(indySubset()$subcategory2)[1])\n     \n    updateSelectInput(session, \"groupSelect\",\n                       label = \"Select Attribute Group Value:\", \n                       choices = c(sort(unique(indySubset()$attribute.group))),\n                       selected = unique(indySubset()$attribute.group)[1])\n    \n    updateSelectInput(session, \"attributeSelect\",\n                      label = \"Select Attribute Value:\", \n                      choices = c(sort(unique(indySubset()$attribute.value))),\n                      selected = unique(indySubset()$attribute.value)[1])\n  })\n\n  indyMerge <- reactive({\n    \n    indyToMerge <- filter(indySubset(), subcategory1 == input$sub1Select, \n                          subcategory2 == input$sub2Select, \n                          attribute.group == input$groupSelect, \n                          attribute.value == input$attributeSelect)\n    \n    if(input$chamberSelect == \"House\") {\n      indyMerged <- geo_join(houseMap, indyToMerge, \"NAMELSAD\", \"name\")\n    }\n    else if (input$chamberSelect == \"Senate\") {\n      indyMerged <- geo_join(senateMap, indyToMerge, \"NAMELSAD\", \"name\")\n    }\n    \n    return(indyMerged)\n    \n  })  \n  \n  output$myPlot <- renderLeaflet({\n    pal <- colorNumeric(\"Reds\", NULL, n = 6)\n    myTitle <- paste(input$demoSelect, \"-\", input$attributeSelect)\n  \n    popup <- paste(\"<b>\",as.character(indyMerge()$NAMELSAD), \"</b><br/>\", myTitle, \": \", round(indyMerge()$result, 2), sep=\"\")\n  \n    myMap <- leaflet() %>% \n      addPolygons(data = indyMerge(), color = \"black\", \n                  fillColor = ~pal(indyMerge()$result), fillOpacity = .7, \n                  weight = 1, popup = popup) %>% \n      addLegend(pal = pal, values = indyMerge()$result, position=\"bottomright\", title=myTitle) %>% \n      addProviderTiles(\"CartoDB.Positron\")\n    \n    return(myMap)\n  })\n  \n})",
    "created" : 1445099649179.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1777168815",
    "id" : "589A955A",
    "lastKnownWriteTime" : 1441916567,
    "path" : "~/Indiana/shinymap/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}